# -*- coding: utf-8 -*-
"""Fake_news_Classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I1Cvqkl-ZCAaRIE2uu4WdmTzpaXa2ok-
"""

import pandas as pd

import seaborn as sns
import matplotlib.pyplot as plt

import nltk

nltk.download('all')

from nltk.stem import PorterStemmer
from nltk.stem import WordNetLemmatizer
from nltk.corpus import stopwords

import re

from sklearn.feature_extraction.text import CountVectorizer

df=pd.read_csv('/content/drive/MyDrive/data/Fake_news_Data/train.csv')

df.head()

df.shape

df.isnull().sum()

df['author']=df['author'].fillna(df['author'].mode()[0])

df.isnull().sum()

x=df['text']

x.isnull().sum()

x=x.dropna()

x.isnull().sum()

x.shape

x.reset_index(inplace=True,drop=True)

wordnet=WordNetLemmatizer()

ps=PorterStemmer()

corpus=[]
for i in range(len(x)):
  review=re.sub('^a-zA-Z',' ',x[i])
  review=review.lower()
  review=review.split()
  review=[wordnet.lemmatize(word) for word in review if word not in stopwords.words('english')]
  review=' '.join(review)
  corpus.append(review)

from sklearn.naive_bayes import MultinomialNB

corpus[0]

cv=CountVectorizer(max_features=5000,ngram_range=(1,3))

X=cv.fit_transform(corpus).toarray()

cv.get_params()

X.shape

df.shape

data=df.copy()

data=data.dropna(subset=['text'])

data.shape

y=data['label']

y.reset_index(drop=True,inplace=True)

y.shape

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test=train_test_split(X,y,test_size=.25,random_state=3)

mnb=MultinomialNB()

mnb.fit(x_train,y_train)

y_pred=mnb.predict(x_test)

from sklearn.metrics import accuracy_score,confusion_matrix,classification_report

accuracy_score(y_test,y_pred)

confusion_matrix(y_test,y_pred)

cm=confusion_matrix(y_test,y_pred)

plt.figure(figsize=(6,4))
sns.heatmap(cm,annot=True,cmap='crest')
plt.xlabel("Predicted Value",size=(20))
plt.ylabel("Actual Value",size=(20))
plt.show()

print(classification_report(y_test,y_pred))

### Using Passive Aggressive  Classifier

from sklearn.linear_model import PassiveAggressiveClassifier

pac=PassiveAggressiveClassifier()

pac.fit(x_train,y_train)

y_pac=pac.predict(x_test)

accuracy_score(y_test,y_pac)

confusion_matrix(y_test,y_pac)

cm=confusion_matrix(y_test,y_pac)

plt.figure(figsize=(6,4))
sns.heatmap(cm,annot=True,cmap='crest')
plt.xlabel("Predicted Value",size=(20))
plt.ylabel("Actual Value",size=(20))
plt.show()

print(classification_report(y_test,y_pac))

